// Mocks generated by Mockito 5.2.0 from annotations
// in my_doc_app_for_patients/test/features/init_app_pref/data/repositories/app_pref_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_doc_app_for_patients/core/errors/app_exceptions.dart' as _i5;
import 'package:my_doc_app_for_patients/features/init_app_pref/data/data_sources/local_data_source.dart'
    as _i3;
import 'package:my_doc_app_for_patients/features/init_app_pref/data/models/app_language_model.dart'
    as _i7;
import 'package:my_doc_app_for_patients/features/init_app_pref/data/models/app_theme_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [AppPrefLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPrefLocalDataSource extends _i1.Mock
    implements _i3.AppPrefLocalDataSource {
  MockAppPrefLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CashExceptions, _i6.AppThemeModel>> getAppTheme() =>
      (super.noSuchMethod(Invocation.method(#getAppTheme, []),
              returnValue: Future<
                      _i2.Either<_i5.CashExceptions, _i6.AppThemeModel>>.value(
                  _FakeEither_0<_i5.CashExceptions, _i6.AppThemeModel>()))
          as _i4.Future<_i2.Either<_i5.CashExceptions, _i6.AppThemeModel>>);
  @override
  _i4.Future<_i2.Either<_i5.CashExceptions, _i7.AppLanguageModel>>
      getAppLanguage() => (super.noSuchMethod(
          Invocation.method(#getAppLanguage, []),
          returnValue: Future<
                  _i2.Either<_i5.CashExceptions, _i7.AppLanguageModel>>.value(
              _FakeEither_0<_i5.CashExceptions, _i7.AppLanguageModel>())) as _i4
          .Future<_i2.Either<_i5.CashExceptions, _i7.AppLanguageModel>>);
}
