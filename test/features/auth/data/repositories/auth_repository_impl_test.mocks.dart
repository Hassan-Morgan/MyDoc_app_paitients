// Mocks generated by Mockito 5.2.0 from annotations
// in my_doc_app_for_patients/test/features/auth/data/repositories/auth_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_doc_app_for_patients/core/errors/app_exceptions.dart' as _i5;
import 'package:my_doc_app_for_patients/core/services/network_info_service.dart'
    as _i8;
import 'package:my_doc_app_for_patients/features/auth/data/data_source/local_data_source/current_user_local_data_source.dart'
    as _i7;
import 'package:my_doc_app_for_patients/features/auth/data/data_source/remote_data_source/firebase_remote_data_source.dart'
    as _i3;
import 'package:my_doc_app_for_patients/features/auth/data/models/user_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [FirebaseAuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthRemoteDataSource extends _i1.Mock
    implements _i3.FirebaseAuthRemoteDataSource {
  MockFirebaseAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i6.UserModel>> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue:
                  Future<_i2.Either<_i5.AuthExceptions, _i6.UserModel>>.value(
                      _FakeEither_0<_i5.AuthExceptions, _i6.UserModel>()))
          as _i4.Future<_i2.Either<_i5.AuthExceptions, _i6.UserModel>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>
      signInWithEmailAndPassword(String? email, String? password) => (super
          .noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [email, password]),
              returnValue:
                  Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>.value(
                      _FakeEither_0<_i5.AuthExceptions, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>
      registerWithEmailAndPassword(String? email, String? password) =>
          (super.noSuchMethod(
                  Invocation.method(
                      #registerWithEmailAndPassword, [email, password]),
                  returnValue:
                      Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>.value(
                          _FakeEither_0<_i5.AuthExceptions, _i2.Unit>()))
              as _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>> registerWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#registerWithGoogle, []),
          returnValue: Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>.value(
              _FakeEither_0<_i5.AuthExceptions, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>> registerWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#registerWithFacebook, []),
          returnValue: Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>.value(
              _FakeEither_0<_i5.AuthExceptions, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>> resetPassword(
          String? email) =>
      (super.noSuchMethod(Invocation.method(#resetPassword, [email]),
          returnValue: Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>.value(
              _FakeEither_0<_i5.AuthExceptions, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i5.AuthExceptions, _i2.Unit>>);
}

/// A class which mocks [CurrentUserLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrentUserLocalDataSource extends _i1.Mock
    implements _i7.CurrentUserLocalDataSource {
  MockCurrentUserLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CashExceptions, _i6.UserModel>> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue:
                  Future<_i2.Either<_i5.CashExceptions, _i6.UserModel>>.value(
                      _FakeEither_0<_i5.CashExceptions, _i6.UserModel>()))
          as _i4.Future<_i2.Either<_i5.CashExceptions, _i6.UserModel>>);
  @override
  _i4.Future<void> setCurrentUser(_i6.UserModel? model) =>
      (super.noSuchMethod(Invocation.method(#setCurrentUser, [model]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get getCurrentConnectionState =>
      (super.noSuchMethod(Invocation.getter(#getCurrentConnectionState),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
